http://www.luafaq.org/#T1.11
https://en.blog.nic.cz/2015/08/12/embedding-luajit-in-30-minutes-or-so/

Data structures
    Userdata: represents C values in Lua
    Light Userdata: represents C pointers in Lua
    Tables have "hybrid" internals: dense(ish) array sections (1…n integer keys) of a table, are stored as literal C arrays (not hashtable), the integer keys are not stored. —"The Implementation of Lua 5.0" https://www.lua.org/doc/jucs05.pdf

Function calls
    Similar to javascript, a "method" is not bound to its table (object) if you refrence the function name without also passing the table.

    function tbl:func(a) end
    -- is syntactic sugar for:
    function tbl.func(self, a) end

    tbl:func(a)
    -- is syntactic sugar for:
    tbl.func(tbl, a)

Scopes
    upvalue = "External local variable" used in an inner function (closure).
              I.e. non-global, non-local, closed-over scope.
              Lua maintains upvalues separately from the stack, for each closure.
              http://www.lua.org/manual/5.1/manual.html#2.6

    Each execution of `local` defines new local variables.
    Example: Each of closure created in the loop uses a different y variable,
    but all of them share the same x.
        a = {}
        local x = 20
        for i=1,10 do
          local y = 0
          a[i] = function () y=y+1; return x+y end
        end

Module organization
    LTN7: http://www.lua.org/notes/ltn007.html

    Use a fixed local name for the package (e.g. Public), and then assign this
    local to the final name of the package.

        local Public, Private = {}, {}
        Complex = Public   -- package name

        Public.i = {r=0, i=1}
        function Public.new (r, i) return {r=r, i=i} end

        function Private.checkComplex (c)
          assert((type(c) == "table") and tonumber(c.r) and tonumber(c.i),
                 "bad complex number")
        end

        function Public.add (c1, c2)
          %Private.checkComplex(c1);
          %Private.checkComplex(c2);
          return {r=c1.r+c2.r, i=c1.i+c2.i}
        end

    Whenever a function calls another function inside the same package (or
    whenever it calls itself recursively), it should access the called function
    through an upvalue of the local name of the package. Example:

        function Public.div (c1, c2)
          return %Public.mul(c1, %Public.inv(c2))
        end

    Following these guidelines, the connection between the two functions does
    not depend on the package name.

Memoize with weak references  https://www.lua.org/pil/17.1.html
    A naive color factory generates a new color for each new request:
        function createRGB (r, g, b)
          return {red = r, green = g, blue = b}
        end
    Using the memoize technique, we can reuse the same table for the same color.
        local results = {}
        setmetatable(results, {__mode = "v"})  -- make values weak
        function createRGB (r, g, b)
          local key = r .. "-" .. g .. "-" .. b
          if results[key] then return results[key]
          else
            local newcolor = {red = r, green = g, blue = b}
            results[key] = newcolor
            return newcolor
          end
        end
    - user can compare colors using the primitive equality operator, because two
      coexistent equal colors are always represented by the same table.
      - Note that the same color may be represented by different tables at
        different times, if a GC cycle clears the results table. But as long as
        a given color is in use, it is not removed from results. So if a color
        survives long enough to be compared with a new one, its representation
        also survives long enough to be reused by the new color.
