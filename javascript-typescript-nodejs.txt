JAVASCRIPT
==============================================================================
object vs Map:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

Function.prototype.bind(fn[, ...])  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
                             ^ partial application!
  Creates a new function where `this` is set to the given value.
  Example:
    // NB: console.error() expects `this` to be `window.console`.
    foo(…).catch(console.error.bind(console, 'foo: '))

NODE.JS
==============================================================================
globals  https://nodejs.org/api/globals.html#globals_global
  global
  process
  require()
  queueMicrotask(callback)
    "The microtask queue is managed by V8 and may be used in a similar manner to
    the process.nextTick() queue, which is managed by Node.js. The
    process.nextTick() queue is always processed before the microtask queue
    within each turn of the Node.js event loop."

UNHANDLED PROMISE REJECTIONS, UNCAUGHT EXCEPTIONS
  https://medium.com/@nodejs/node-js-promise-reject-use-case-survey-98e3328340c9
  nodejs option: --unhandled-rejection=strict
  global handlers:
    process.on('unhandledRejection'))
    process.on('uncaughtException')
    Problem: any package/dependency can add its own handler!
    VSCode extension can't use? https://github.com/microsoft/vscode/issues/93573

setImmediate(), process.nextTick(), …  https://nodejs.org/api/process.html#process_process_nexttick_callback_args
  nextTick(): queues a function BEFORE pending I/O callbacks
    Adds callback to the "next tick queue" (essentially the head of the event queue). This queue is fully drained after the current JS stack runs to completion and before the event loop continues.
      up to process.maxTickDepth queued callbacks per iteration
      potential infinite loop
      potentially starves I/O
    Almost as fast as a synchronous call (much more efficient than setTimeout(fn,0)).
    Use case: to give users the opportunity to assign event handlers on object-construction but before I/O has occurred.
  setImmediate(): queues a function AFTER pending I/O callbacks
    Will yield to the event loop after firing a queued callback to ensure I/O is not starved.
    Use case: to break up a long running CPU-bound job, use setImmediate rather than process.nextTick to queue the next iteration (otherwise any I/O event callbacks wouldn't get the chance to run between iterations).

event-loop phases  https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/
  timers:            execute callbacks scheduled by setTimeout()/setInterval().
  pending callbacks: execute I/O callbacks deferred to the next loop iteration.
  idle, prepare:     only used internally.
  poll:              gather new I/O events;
                     execute I/O callbacks (=> all callbacks except close callbacks, timer callbacks, and setImmediate());
                     node may block here.
  check:             execute setImmediate() callbacks.
  close callbacks:   some close callbacks, e.g. socket.on('close', …).

  > Between each run of the event-loop, Node.js checks if it is waiting for any
  > asynchronous I/O or timers and shuts down cleanly if there are not any.

known issue: "stdio buffered writes (chunked) issues & process.exit() truncation"
  https://github.com/nodejs/node/issues/6456
  workaround: https://www.npmjs.com/package/node-exit

TYPESCRIPT
==============================================================================
https://basarat.gitbook.io/typescript/type-system/freshness

Declare a motherfucking map:
  const things: { [key: string]: boolean } = {}

https://httptoolkit.tech/blog/5-big-features-of-typescript-3.7/

type transformations/composition
  https://www.typescriptlang.org/docs/handbook/utility-types.html

optional chaining x
  // With TS 3.7:
  // Returns the value is it's all defined & non-null, or undefined if not.
  let result = data?.key1?.key2;
  // The same, through an array index or property, if possible:
  array?.[0]?.['key'];
  // Call a method, but only if it's defined:
  obj.method?.();
  // Get a property, or return 'default' if any step is not defined:
  let result = data?.key1?.key2 ?? 'default';
  // GOTCHA: returns undefined for missing values, even if they were null.
  (null)?.key  // returns undefined

NPM
==============================================================================
webpack will use whatever is in node_modules regardless of where it came from.
Once bundled, it doesn't matter whether a dep was declared in package.json
"dependencies" or "devDependencies". dev-deps only matter when others consume
the package as a dependency.
