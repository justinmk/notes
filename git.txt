git svn clone "svn://foosrc/subdir" . -T trunk -b branches -t tags -r234:HEAD --ignore-path="foo(bar|baz).exe|^Chtulu/|.+\.(dll|jar)$"

git svn init -s --ignore-path="foo" svn://foosrc/subdir
git svn fetch -r123:HEAD

GENERAL
    add "--stat" option to any query command (stash show, log, diff) to get
    file-by-file insertion/deletion counts.

    #view every single commit in the repository ever
    gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )

    # find last commit matching a regex
    # example: show the last merge commit
    $ git show :/^Merge

    # git pickaxe -G option is greedier than -S and always accepts regex!
    $ git log -G<regex>

    # git grep can search any branch!
    $ git grep foo <branch>

    # `git show` is analogous to `cat`.  https://www.andyjeffries.co.uk/25-tips-for-intermediate-git-users/
    # (and `git cat-file` is for opening objects)
    git show master:flash/foo.fla > master-foo.fla

RANGES (see: git help rev-parse > "Specifying ranges")
    git log origin/master..
        is equivalent to:
    git log origin/master..HEAD

    # "triple dot" diff shows the changes between alice/master and its merge
    # base (COMMON ANCESTOR) with master. It won't include any changes that
    # happened on master since the COMMON ANCESTOR (use "git merge-tree").
    git diff master...alice/master

    git merge-tree `git merge-base bob/master` master bob/master

SELECT/FILTER COMMITS
    # Show commits on `my-feature` and NOT on `master` (complement):
    git log my-feature ^master

CONFIGURATION: ALIASES
    ! runs at the root of the repo. To make ! commands relative to the current
    directory, cd to $GIT_PREFIX:
        git alias foo='!cd $GIT_PREFIX; foo -bar'
    #Use GIT_TRACE=1 to make the alias processing transparent:
    $ GIT_TRACE=1 git foo

CLONING
    https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/
    Shallow clone
      - truncates the commit history
        git clone --depth=<N>
      - best combined --single-branch --branch=<branch> options, to ensure we only download the data for the commit we plan to use immediately.
      - unlike *partial* clone, commands such as `git merge-base` or `git log` show different results.
    Partial clone
      - doc: https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---filterltfilter-specgt
      - enabled by specifying the --filter option in your git clone command.
      - Blobless clones: git clone --filter=blob:none <url>
        - will trigger a blob download whenever you need the contents of a file, but not if you only need the OID of a file.
        - can perform commands like `git merge-base`, `git log`, or even `git log -- <path>` with the same performance as a full clone.
      - Treeless clones: git clone --filter=tree:0 <url>
        - downloads all reachable commits, then downloads trees and blobs on-demand.
        - initial clone _much_ faster in a treeless clone than in a blobless or full clone
        - use-case: for automated builds when you want to quickly clone, compile, then throw away the repository.
        - current? limitations:
          - a file history request such as git log -- <path>, will download root trees for almost every commit in the history!
          - submodules behave very poorly with treeless clones.

BRANCHING
    git checkout -b new_branch [branch to track]

    #list all branches (local and remote)
    git branch -a

    #find out which branch contains a commit
    git branch -a --contains 50f3754

    #move (rename) a branch
    git branch -m smurf master

MERGING
    REBASE AND MERGE DON'T MIX!
        http://stackoverflow.com/a/15153099/152142

    git creates a "merge commit" because merges are intended to be _meaningful_.

REBASING
    #rebase the current branch onto the remote head
    git svn rebase

    #rebase the current branch onto master
    git rebase master

    #rebase onto the latest _remote_ commit on the current branch
    #(this is sugar for  `git rebase @{u}` AKA `git rebase @{upstream}`)
    git rebase

INTERACTIVE REBASE (SELECTIVELY REMOVE OR EDIT COMMITS)
    http://christoph.ruegg.name/blog/2010/5/5/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html
    #to remove a commit but keep all others, do an interactive rebase onto
    #the parent of the offending commit:
    git rebase -i dd61ab32^

CLEANING UNTRACKED FILES (DELETED FROM INDEX AFTER A REBASE)
    #dry run
    git clean -n

    #remove untracked files (not directories)
    # f = force (not file)
    git clean -f

CREATING/APPLYING PATCHES
    #create patch of current branch against master
    git format-patch master --stdout > foo.patch

    #create a "diff" patch from current uncommitted changes
    git diff > result.patch

    #summarize patch changes
    git apply --stat foo.patch

    #apply patch (dry run)
    git apply --check foo.patch

    #apply "format-patch" patch (with signoff); .rej files for any conflicts
    git am --reject --ignore-whitespace --signoff < foo.patch


TEMPORARILY IGNORING FILES (cf. svn's "ignore-on-commit")
    #shelve current changes
    git stash save "foo"

    #apply ALL shelved changesets
    git stash apply

    #list shelved changesets
    git stash list

    #apply a specific changeset from the list...
    git stash apply stash@{1}

ADD A SVN REMOTE MANUALLY: http://stackoverflow.com/q/296975/152142
        note: {new_branch} must not begin with a number
    git config --add svn-remote.{new_branch}.url https://svn/path/to/new_branch/
    git config --add svn-remote.{new_branch}.fetch :refs/remotes/{new_branch}
    git svn fetch {new_branch} [-r<rev>]
    git checkout -b {new_local_branch} -t {new_branch}
    git svn rebase {new_local_branch}

REMOTES
    # print fetch/push URLs
    git remote -v

    # show details about <remote> (incl. local tracking branches)
    git remote show <remote>

    git remote add <name> git://<ip-address>/<directory-containing-.git>
    git remote add smurf ssh://user@<HOST_IP>:9999/~/.git

PER-REPO SSH KEYS
    ~/.ssh/config:
        Host host1
        HostName github.com
        User git
        IdentityFile ~/.ssh/host1_key
    .git/config:
        [user]
          email = user1@example.com  # github email
        [remote "origin"]
          url = git@host1:justinmk/repo1.git
    $ ssh-add -D  # delete cached keys!
    $ git push ...

VIRTUALBOX CONFIGURATION
    * in guest host:
        $ sudo ip link set dev ethX down
        $ sudo dhclient ethX
    * set Network to "NAT"
    * set port forwarding 
    * to ssh to guest, target the HOST ip + fowarded port and VB will route it
    * on your dev box, add a remote pointing to HOST_IP:VIRTUALBOX_FORWARDED_PORT
        $ git remote add vbox ssh://user@<HOST_IP>:9999/~/.git

REBASING ONTO NON-SVN REMOTES
    git pull marco marcos_local_branch

PUSH LOCAL BRANCH TO REMOTE BRANCH
    git push remote_alias local_branch:remote_branch

GITHUB: FETCH PULL REQUESTS AS LOCAL REFERENCES: https://help.github.com/articles/checking-out-pull-requests-locally

    [remote "origin"]
        fetch = +refs/pull/*/head:refs/pull/origin/*
                ^^                ^
                ||                local ref pattern
                |remote ref pattern
                update references even if they aren't fast-forwards

MERGING, REBASING, SVN
    #preserve author in dcommit

     http://keithp.com/blogs/Repository_Formats_Matter/
     subversion repository format is poorer than the git one. It doesn't support merging well, or committers vs authors or commit times distinct from push times

     options that are good for small batches, but fall over on large batches:
        [rerere]
            enabled = 1
        [merge]
            # disable renameLimit  http://stackoverflow.com/a/13118734/152142
            renameLimit = 0

GIT INTERNALS: http://git-scm.com/book/en/Git-Internals-Plumbing-and-Porcelain
    Git is a content-addressable filesystem with a VCS UI written on top of it.
    Q: what does that mean?
    A: check out Joe Armstrong's talk. "content-addressing" differs from
       "reference address" because it is immutable
       It's important for reliability / attempt to solve entropy.

    core parts of Git:
    .git/
        HEAD        points to the current branch
        index       stores staging area information
        objects/    stores all database content
        refs/       stores pointers (branches) to commit objects in objects/

    HOW TO NOT LOSE DATA:
        `git add` adds the file immediately to `.git`, and will be available
        even after `git reset`, etc., even if you never committed it.

    PACKFILES:
        `git extract-objects` unpacks a packfile into a zlib-compressed object
        file (.git/objects/xx/*).
        To see the contents of an object:
            cat .git/objects/c0/fb67ab3fda7909000da003f4b2ce50a53f43e7 | zlib-flate -uncompress;

    LAST SLIDE:
        "Git has become a protocol/platform in addition to a VCS."
        https://git-annex.branchable.com/

