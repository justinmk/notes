send email from command line: MSMTP
    https://github.com/marlam/msmtp-mirror
    https://wiki.archlinux.org/index.php/msmtp

http://matt.might.net/articles/bash-by-example/
style guide: https://google.github.io/styleguide/shell.xml

http://en.wikipedia.org/wiki/Bash_(Unix_shell)#Keyboard_shortcuts

Ctrl-] x            move the cursor forward to the next occurance of x
Alt-Ctrl-] x        move the cursor backwards to the previous occurance of x
Ctrl-_
Ctrl-x Ctrl-u       Undo the last changes
Alt-r               Undo all changes to the line.

grep recursive glob filter for bash 3.x:
    grep -r --include=*.js foo .

grep recursive glob filter for bash 4+ with:
    shopt -s globstar
    grep -RHsn 'string' **/*.ext

    -H      Always print filename headers with output lines.
    -s      Nonexistent and unreadable files are ignored.
    -n      Each output line is preceded by its line number relative to the file

conditionals
    Whitespace in conditional brackets is *required*.
        This will cause an error:
            ["$TERM" = ""] || echo ok
        This is correct:
            [ "$TERM" = "" ] || echo ok

    Whitespace also affects grouped {} commands.  http://www.gnu.org/software/bash/manual/bashref.html#Command-Grouping
    Best practice:
        - always inner-pad [ ... ] ( ... ) { ... } with whitespace.
        - always terminate groups ( ...; ) { ...; } with semicolon.

subshells and pipelines  http://stackoverflow.com/a/2188223/152142
    In a pipeline,
        cmd1 | cmd2 | cmd3
    all commands (pipe segments) run concurrently (with stdin/stdout streams
    connected) in isolated _subshell_ environments. Env vars modified in a pipe
    segment (subshell!) will not reflect in other segments (subshells!).

    Parentheses
        ( ...; )
    create a _subshell_ with its own temporary environment and scope.

    Braces
        { ...; }
    _group_ commands in the _current_ shell context. If that group is part of
    a pipeline, it runs in a separate subshell, like any other pipeline segment
    (http://unix.stackexchange.com/a/127346/14626).

    Examples:
        # concatenate 'date' and 'top'
        { date; top -b -n1 | head ; } > logfile

        # timestamp a build log
        { date; make 2>&1; date; } | tee logfile

    https://lobste.rs/s/mb14bg/what_should_be_output_this_command_echo
    Q: What is the output of:
        $ (echo red; echo green 1>&2) | echo blue
    A: Processes started on either side of the pipe are not run in any
       particular order. The shell just forks two processes with their stdout
       and stdin hooked together.
       .
       LHS forks a subshell process with stdout redirected to the pipe. That
       subshell process forks and executes `echo red`, that output goes into the
       pipe, and `echo red` terminates. That subshell process then forks and
       executes `echo green 1>&2`, that output goes to the shell’s stderr, and
       `echo green` terminates. Neither echo processes block.
       .
       Sometimes `echo blue` will run AND terminate before the OS schedules
       `echo red` to run. The OS will then send SIGPIPE to `echo red`. It will
       terminate without writing.
       .
       But then the subshell should fork and execute `echo green 1>&2`, right?
       Actually no. `echo` is a bash builtin, meaning the subshell performs the
       write, so it receives SIGPIPE and terminates before starting
       `echo green 1>&2`.
       .
       Even though both stages fork the same number of times, the left subshell
       makes more syscalls, so echo blue still usually runs first.

    Implementation
      https://www.oilshell.org/blog/2021/11/release-0.9.4.html
        process-done notifications via waitpid(-1) are asynchronous, and
        serialized, so shells need data structures to keep track of it all.


process substitution
    Imagine you want to see the difference between the output of two commands:
        head -n 1 .dictionary > file1
        tail -n 1 .dictionary > file2
        diff -y file1 file2
        rm file1 file2
    We can do that with the _Process Substitution_ operator:
        diff -y <(head -n 1 .dictionary) <(tail -n 1 .dictionary)
    >(..) operator is like <(..) operator, but instead of redirecting the
    command's output to a file, we redirect the file to the command's input.
        tar -cf >(ssh host tar xf -) .

File Descriptors / Redirection
    By default, every new process starts with three open fds:
        stdin (fd 0)
        stdout (fd 1)
        stderr (fd 2)
    command > file  : Send the stdout of `command` to file.
    command 1> file : Same.
    command < file  : Use the contents of `file` when command reads from stdin.
    command 0< file : Same.
            >>file  : Redirect STDOUT to file (append mode) (alias of 1>>file)
            2>&1    : Redirect STDERR to "where stdout goes". Note that the
                      interpretion "redirect STDERR to STDOUT" is wrong.
    "Redirection is _always_ evaluated from left to right."

Pipes

    - Use File Redirection to write output to files or read input from files.
        - You could use mkfifo to create a FIFO (a FIFO never contains any data.
          FIFO reads will block until another process writes to the FIFO; FIFO
          writes will block until another process reads the FIFO).
        - FIFOs are also called "named pipes".
    - Use (anonymous) pipes to connect the output of one application directly to
      the input of another.

    When you connect processes in a pipe:
        a | b
    you connect stdout (fd 1) of a to stdin (fd 0) of b. Technically,
    the shell process will create a pipe, which is two filedescriptors connected
    back to back. It then will fork two times (create two copies of itself)
    where it replaces standard output (filedescriptor 1) of the first copy by
    one end of the pipe and replaces standard input (filedescriptor 0) of the
    second copy by the other end of the pipe. Then the first copy will replace
    itself (exec) by a, the second copy will replace itself (exec) by b.
    Everything that a writes to stdout will appear on stdin of b.

    But nothing prevents the shell from replacing any other filedescriptor by
    pipes. And when you create a subprocess by writing
        <(c)
    in your commandline, it's just one additional fork for the shell, and one
    additional filedescriptor pair to be created. One side, as in the simple
    case, will replace stdin (fd 0) of "c"... and because the input side of
    this pipe doesn't have a predefined output of "a" (stdout is already taken
    by "|b") the shell will somehow have to tell "a" what filedescriptor the
    pipe uses. Under Linux one can refer to opened filedescriptors as
    "/dev/fd/<FDNUM>" (symlink to /proc/self/fd/<FDNUM> which itself is
    a symlik to /proc/<PID>/fd/<FDNUM>), so that's what's replaced as a "name"
    to refer to the substituted process on "a"'s command line:

    Try this:
        $ echo $$
        12345  # <--- PID of your shell
        $ tee >( sort ) >( sort ) >( sort ) otherfile | sort

    and in a second terminal:
        $ pstree 12345 # <--- PID of your shell
        zsh,301
          ├─sort,3600 # <-- this one reads from the other end of the shell's fd #14
          ├─sort,3601 # <-- this one reads from the other end of the shell's fd #15
          ├─sort,3602 # <-- this one reads from the other end of the shell's fd #15
          ├─sort,3604 # <-- this one reads from stdout of tee
          └─tee,3603 /proc/self/fd/14 /proc/self/fd/15 /proc/self/fd/16 otherfile

    If your system doesn't support the convenient /proc/self/fd/<NUM>
    shortcut, the shell might decide not to create a pipe, but rather create
    temporary fifos in /tmp and use those to connect the filedescriptors.

    You can watch the syscalls as they are made:
        $ strace -fe fork,pipe,close,dup,dup2,execve bash -c 'tee <(sort) <(sort)'
    Use -y or -yy to get more info.
        http://jvns.ca/blog/2016/06/07/strace-y/

subshell as input file to a command (e.g., vim)
        vim -Nu <(echo 'set rtp+=~/.vim/bundle/neocomplete.vim/')
    for multiline stream, cat a heredoc:
        vim -Nu <(cat << EOF
        set runtimepath+=~/.vim/bundle/neocomplete.vim/
        let g:neocomplete#enable_at_startup = 1
        EOF)

command CMD
    Execute CMD, ignoring any function "shadow". (like `normal!` in Vim)

BEST PRACTICES / LINT
    http://redsymbol.net/articles/unofficial-bash-strict-mode/

    #!/bin/bash
    set -e # sometimes this is a bit of a hassle...
    set -o pipefail
    set -o nounset # prevents referencing undefined
                   # variables (which default to "")

    But don't use "set -o errexit".
        http://lists.gnu.org/archive/html/bug-bash/2012-12/msg00093.html

    shellcheck is amazing
        https://github.com/koalaman/shellcheck

    http://robertmuth.blogspot.com/2012/08/better-bash-scripting-in-15-minutes.html
        - User functions behave like other commands; use them liberally.
        - Strive to annotate most variables with either `local` or `readonly`.
        - Favor $() over backticks, especially for nesting.
        - [[]] (double brackets) avoids problems like unexpected pathname
          expansion.
        - $* is never the right choice, prefer "$@" (including quotes). It is
          a special case: produces multiple quoted forms.
          "$*" => "$1 $2 $3 ..."
          "$@" => "$1" "$2" "$3" ...
        - Run script wth _expanded_ trace (debug): bash -x myscript.sh
            - Use "set -o xtrace" to do this from the script itself => useful if
              the script is run on a remote machine, e.g. a build-bot.

    http://www.etalabs.net/sh_tricks.html
        printf %s\\n "$var"
            - use `printf` instead of `echo`
            - see also: https://github.com/koalaman/shellcheck/issues/274

        IFS= read -r var
            - reads a line of input, terminated by a newline or EOF or error
              condition, from stdin and stores the result in var.

TOOLS:
    iftop
    iotop
    lsof "replaces ps and netstat"  http://danielmiessler.com/study/lsof/
        lsof -c tmux        see what files and network connections tmux is using
        lsof /var/log/*     see everything that is interacting with /var/log/*

FAQ:
    you don't need to protect the end-of-line with a backslash if:
        - the line ends with the pipe symbol
        - you are in an unclosed string
    return value of `local` assignment:
        `local foo=$(...); echo $?` always returns zero!
            http://unix.stackexchange.com/a/146900/14626
        workaround: always declare the `local` var first:
            local foo
            foo=$(...)
            echo $?

    var=$(dirname "$f")
            http://www.etalabs.net/sh_tricks.html
        Because most commands writing a newline at the end of their output,
        Bourne-style command substitution was designed to strip _all_ trailing
        newlines from the output. In the above command, if f contains any
        trailing newlines in the last directory component, they will be
        stripped, yielding a different directory name.

ssh
    To disconnect a client from a hung host:
        <Enter>~.
