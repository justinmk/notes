==============================================================================
How to Replace Docker with Podman on a Mac
https://news.ycombinator.com/item?id=28463212
https://news.ycombinator.com/item?id=28464897

    brew install podman
    podman machine init
    podman machine start
    alias docker=podman

  IIRC the podman socket is a planned thing for macOS as it'll be necessary for certain features that rely on the docker socket and don't use SSH, such as VSCode's Remote Containers extension.
  However you can create an SSH tunnel to create the socket locally to allow non-podman clients to utilize the socket over SSH with the DOCKER_HOST environment variable.

    # Get URI
    podman system connection ls

    # Create tunnel
    ssh -nNT -L/tmp/podman.sock:/run/user/1000/podman/podman.sock -i ~/.ssh/podman-machine-default ssh://core@localhost:[PORT]

    # Export socket location
    export DOCKER_HOST='unix:///tmp/podman.sock'

  https://github.com/containers/podman/issues/11462
  https://github.com/containers/podman/issues/11397

==============================================================================
DEVELOPMENT

Build and run:

  docker build --rm -t fleetscanner . && docker run fleetscanner:latest

Minimal container by leveraging "base image" concept:
  https://gist.github.com/jrockway/cceef8bb5dcef62743f8bcbc044cd2ad
  > Build your application in a convenient container, then copy the resulting
  > binary into a barebones container (nothing except SSL certificates and the
  > time zone database, for Go code anyway).

  Dockerfile:
      FROM golang:alpine AS build
      RUN apk add git bzr gcc musl-dev
      WORKDIR /whatever/
      COPY go.mod go.sum ./
      ARG GOPROXY
      RUN go mod download

      COPY . .
      ARG VERSION
      RUN go install -ldflags "-X <internal package>.Version=$VERSION" -v ./your/app

      FROM alpine:latest
      RUN apk add ca-certificates tzdata
      WORKDIR /
      COPY --from=build /go/bin/app /go/bin/app
      CMD ["/go/bin/app"]

==============================================================================
DOCKERFILE/OCI SPEC
  - Layers are created at the end of each RUN. If files don't exist at the end of the RUN they are not stored.

Multi-stage image: use "FROM … AS …" to create a stage
  https://docs.docker.com/build/building/multi-stage/

  Example Dockerfile:
      FROM some-language-runtime:major.minor.patch as base
      FROM base as build
      # here are statements that build your application
      FROM base as vscode-devcontainer
      # Install Git to be able to use it right in the development container
      RUN apt-get update && apt-get install git -y
      # install further useful tools, e.g. pre-commit.org or others
      FROM base as production-app
      COPY --from=build /some/artifact.bin /somewhere/
      ENTRYPOINT something

==============================================================================
OPS / TROUBLESHOOTING

# Get the most "recent" container:
docker ps --format json | jq -r '.ID' | head -1

# Open a shell in the most recent container:
docker exec -it "$(docker ps --format json | jq -r '.ID' | head -1)" /bin/bash

# Show running processes in the most recent container:
docker top "$(docker ps --format json | jq -r '.ID' | head -1)"

# Attach to running container TTY:
docker attach --sig-proxy=false <container-id>

# Invoke in container exposing port 3000 (uses query/filter):
docker exec -i $(docker ps -q -f publish=3000) foo

# Get runtime info, post-mortem, env, etc.:
docker inspect <container-id>

==============================================================================
NETWORK

Can use `lsof` to find assigned host ports:
  sudo lsof | grep 'docker.*TCP.*LISTEN'

==============================================================================
EVENT LOG

Print global docker events since 5 minutes:
  docker events --since "$(date +%Y-%m-%dT%H:%M:%S --date '-5 minutes')" --until "$(date +%Y-%m-%dT%H:%M:%S)"

- "container die … exitCode=137" means the container was killed with SIGKILL
  (128 + signalNumber). Look for "container kill … signal=9" in previous messages.

==============================================================================
GDB BACKTRACE

To use strace, gdb, etc., the SYS_PTRACE capability must be enabled:

  docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined

==============================================================================
JAVA BACKTRACE

send SIGQUIT (3)
----------------

  # e.g. in tomcat, thread dump will be sent to <TOMCAT_HOME>/logs/catalina.out
  kill -3 <pid>


jcmd
----

To get thread dumps (callstack snapshots), we need `jcmd`. Usually included with
the jdk. Try this:

  docker exec -it 7530bfaafa05 jcmd

If that doesn't work, a workaround is to copy jcmd from the host environment
into the container:

  docker cp /usr/lib/jvm/java-8-openjdk-amd64/ <containerid>:/jdk

Now call jcmd:
  # stacktrace
  docker exec <containerid> /jdk/bin/jcmd 1 Thread.print
  # heap dump / memory analysis
  docker exec <containerid> /jdk/bin/jcmd 1 GC.heap_dump
